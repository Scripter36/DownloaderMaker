/*jslint esversion: 6*/
function reverseColor(color) {
    color = color.toLowerCase();
    let red = "0x" + color.substring(0, 2).toString(10);
    let green = "0x" + color.substring(2, 4).toString(10);
    let blue = "0x" + color.substring(4, 6).toString(10);
    return "rgb(" + (255 - parseInt(red)) + "," + (255 - parseInt(green)) + "," + (255 - parseInt(blue)) + ")";
}

function colorChange(type) {
    if (type === 0) {
        let color = document.getElementById('mainwindowtitlecolor').value;
        document.getElementById('mainwindowtitlecolor').style = "background-color: " + color + "; color:" + reverseColor(color);
    } else if (type === 1) {
        let color = document.getElementById('maincolor').value;
        document.getElementById('maincolor').style = "background-color: " + color + "; color:" + reverseColor(color);
    }
}

let script = '/*jshint esversion: 6 */<br><br>/**<br> * 스크립트, 어플, 파일 자동 다운로드 스크립트<br> * @author Scripter36(1350adwx)<br> */<br><br><br>/**<br> * 파일 다운로더<br> * @param {String} _url     다운로드 받을 Url<br> * @param {File} _path    다운로드 받아질 경로<br> * @param {Boolean} _install 설치 여부<br> * @param {Boolean} _force   강제 설치 여부<br> */<br>function AutoDownloader(_url, _path, _install, _force) {<br>    /** @type {Context} 마크 context */<br>    let ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();<br>    /** @type {String} 다운로드 받을 Url */<br>    let url = _url,<br>        /** @type {File} 다운로드 받아질 경로 */<br>        path = _path,<br>        /** @type {Boolean} 설치 여부 */<br>        install = _install,<br>        /** @type {Boolean} 강제 설치 여부 */<br>        force = _force,<br>        /** @type {Number} 진행 Byte */<br>        progress = 0,<br>        /** @type {Number} 다운받는 파일 크기(Byte) */<br>        max = 0,<br>        /** @type {Boolean} 다운로드 시작 여부 */<br>        started = false;<br><br>    /**<br>     * 다운로드 받을 Url 변경<br>     * @param {String} _url 다운로드 받을 Url<br>     */<br>    this.setUrl = function(_url) {<br>        url = _url;<br>        return this;<br>    };<br><br>    /**<br>     * 다운로드 받을 Url 가져오기<br>     * @return {String} 다운로드 받을 Url<br>     */<br>    this.getUrl = function() {<br>        return url;<br>    };<br><br>    /**<br>     * 다운로드 받아질 경로 변경<br>     * @param {File} _path 다운로드 받아질 경로<br>     */<br>    this.setPath = function(_path) {<br>        if (_path instanceof java.io.File) path = _path;<br>        else path = new java.io.File(_path);<br>        return this;<br>    };<br><br>    /**<br>     * 다운로드 받아질 경로 가져오기<br>     * @return {File} 다운로드 받아질 경로<br>     */<br>    this.getPath = function() {<br>        return path;<br>    };<br><br>    /**<br>     * 다운로드 후 설치 여부 변경<br>     * @param {Boolean} _install 설치 여부<br>     */<br>    this.setInstall = function(_install) {<br>        install = _install == true;<br>        return this;<br>    };<br><br>    /**<br>     * 다운로드 후 설치 여부 가져오기<br>     * @return {Boolean} 설치 여부<br>     */<br>    this.isInstall = function() {<br>        return install;<br>    };<br><br>    /**<br>     * 다운로드 후 강제 설치 여부 변경<br>     * @param {Boolean} _force 강제 설치 여부<br>     */<br>    this.setForceInstall = function(_force) {<br>        force = _force == true;<br>        return this;<br>    };<br><br>    /**<br>     * 다운로드 후 강제 설치 여부<br>     * @return {Boolean} 강제 설치 여부<br>     */<br>    this.isForceInstall = function() {<br>        return force;<br>    };<br><br>    /**<br>     * 다운로드 시작 여부 가져오기<br>     * @return {Boolean} 다운로드 시작 여부<br>     */<br>    this.isStarted = function() {<br>        return started;<br>    };<br><br>    /**<br>     * 다운로드해야 할 Byte 가져오기<br>     * @return {Number} 다운로드 해야 할 Byte<br>     */<br>    this.getMax = function() {<br>        return max;<br>    };<br><br>    /**<br>     * 다운로드 한 Byte 가져오기<br>     * @return {Number} 다운로드 한 Byte<br>     */<br>    this.getProgress = function() {<br>        if (path === undefined) return 0;<br>        if (!started) return 0;<br>        return path.length();<br>    };<br><br>    /**<br>     * 다운로드<br>     * @param  {Function} callback 다운로드 완료 후 실행될<br>     */<br>    this.download = function(callback) {<br>        if (path.exists()) path.delete();<br>        started = true;<br>        let thread = new java.lang.Thread(new java.lang.Runnable({<br>            run: function() {<br>                try {<br>                    let _url = new java.net.URL(url);<br>                    let urlConn = _url.openConnection();<br>                    max = urlConn.getContentLength();<br>                    var bis = new java.io.BufferedInputStream(_url.openStream());<br>                    var bos = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));<br>                    var len;<br>                    while ((len = bis.read()) !== -1) {<br>                        bos.write(len);<br>                    }<br>                    bos.flush();<br>                    bis.close();<br>                    bos.close();<br>                    if (install) {<br>                        let name = path.getName() + "";<br>                        let lastname = name.split(".")[name.split(".").length - 1].toLowerCase();<br>                        if (lastname === "apk") {<br>                            try {<br>                                let intent = new android.content.Intent(android.content.Intent.ACTION_VIEW);<br>                                intent.setDataAndType(android.net.Uri.fromFile(path), "application/vnd.android.package-archive");<br>                                ctx.startActivity(intent);<br>                                if (force) {<br>                                    let packageName = ctx.getPackageManager().getPackageArchiveInfo(path.getAbsolutePath(), 0).packageName;<br>                                    try {<br>                                        ctx.getPackageManager().getPackageInfo(packageName, android.content.pm.PackageManager.GET_ACTIVITIES);<br>                                        let uninstallIntent = new android.content.Intent(android.content.Intent.ACTION_DELETE, android.net.Uri.fromParts("package", packageName, null));<br>                                        ctx.startActivity(uninstallIntent);<br>                                    } catch (e) {<br><br>                                    }<br>                                }<br>                            } catch (e) {<br>                                print(e.lineNumber + "" + e);<br>                            }<br>                        } else if (lastname === "js") {<br>                            let file;<br>                            if (net.zhuoweizhang.mcpelauncher.Utils.isPro()) file = new java.io.File(android.os.Environment.getDataDirectory().getAbsolutePath() + "/data/net.zhuoweizhang.mcpelauncher.pro/app_modscripts/" + path.getName());<br>                            else file = new java.io.File(android.os.Environment.getDataDirectory().getAbsolutePath() + "/data/net.zhuoweizhang.mcpelauncher/app_modscripts/" + path.getName());<br>                            if (!file.exists() || force) {<br>                                try {<br>                                    let bis = new java.io.BufferedInputStream(new java.io.FileInputStream(path));<br>                                    let bos = new java.io.BufferedOutputStream(new java.io.FileOutputStream(file));<br>                                    let len;<br>                                    let lens = [];<br>                                    while ((len = bis.read()) !== -1) {<br>                                        lens.push(len);<br>                                    }<br>                                    for (len of lens) bos.write(len);<br>                                    bos.flush();<br>                                    bis.close();<br>                                    bos.close();<br>                                } catch (e) {<br>                                    print(e.lineNumber + "" + e);<br>                                }<br>                            }<br>                            net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(file, true);<br>                        } else if (lastname === "zip") {<br>                            var zis = new java.util.zip.ZipInputStream(new java.io.FileInputStream(path));<br>                            let entry;<br>                            while ((entry = zis.getNextEntry()) != null) {<br>                                let file = new File(sdcard+"/games/com.mojang/minecraftWorlds/" + entry.getName());<br>                                if (entry.isDirectory()) file.mkdirs();<br>                                else {<br>                                    let fos = new java.io.FileOutputStream(file);<br>                                    let buf = new java.nio.ByteBuffer.allocate(1024).array();<br>                                    let len;<br>                                    while ((len = zis.read(buf)) != -1) fos.write(buf, 0, len);<br>                                    fos.close();<br>                                }<br>                                zis.closeEntry();<br>                            }<br>                            zis.close();<br>                        }<br>                    }<br>                    callback();<br>                    started = false;<br>                } catch (e) {<br>                    print(e.lineNumber + "" + e);<br>                }<br>            }<br>        }));<br>        thread.start();<br>        return this;<br>    };<br>}<br>const ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();<br>const Runnable = java.lang.Runnable;<br>const Button = android.widget.Button;<br>const TextView = android.widget.TextView;<br>const ToggleButton = android.widget.ToggleButton;<br>const CheckBox = android.widget.CheckBox;<br>const Switch = android.widget.Switch;<br>const SeekBar = android.widget.SeekBar;<br>const ProgressBar = android.widget.ProgressBar;<br>const PopupWindow = android.widget.PopupWindow;<br>const Toast = android.widget.Toast;<br>const EditText = android.widget.EditText;<br>const OnCheckedChangeListener = android.widget.CompoundButton.OnCheckedChangeListener;<br>const OnTouchListener = android.view.View.OnTouchListener;<br>const OnClickListener = android.view.View.OnClickListener;<br>const MotionEvent = android.view.MotionEvent;<br>const Gravity = android.view.Gravity;<br>const ScrollView = android.widget.ScrollView;<br>const LinearLayout = android.widget.LinearLayout;<br>const horizontalScrollView = android.widget.HorizontalScrollView;<br>const FrameLayout = android.widget.FrameLayout;<br>const Width = ctx.getScreenWidth();<br>const Height = ctx.getScreenHeight();<br>const Bitmap = android.graphics.Bitmap;<br>const BitmapFactory = android.graphics.BitmapFactory;<br>const BitmapDrawable = android.graphics.drawable.BitmapDrawable;<br>const Drawable = android.graphics.drawable.Drawable;<br>const drawable = android.graphics.drawable;<br>const ColorDrawable = android.graphics.drawable.ColorDrawable;<br>const Color = android.graphics.Color;<br>const Canvas = android.graphics.Canvas;<br>const Paint = android.graphics.Paint;<br>const Typeface = android.graphics.Typeface;<br>const ScriptManager = net.zhuoweizhang.mcpelauncher.ScriptManager;<br>const Thread = java.lang.Thread;<br>const File = java.io.File;<br>const OutputStreamWriter = java.io.OutputStreamWriter;<br>const FileOutputStream = java.io.FileOutputStream;<br>const FileInputStream = java.io.FileInputStream;<br>const BufferedReader = java.io.BufferedReader;<br>const BufferedInputStream = java.io.BufferedInputStream;<br>const BufferedOutputStream = java.io.BufferedOutputStream;<br>const InputStreamReader = java.io.InputStreamReader;<br>const sdcard = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();<br>const LayoutParams = android.widget.RelativeLayout.LayoutParams;<br>let listURL = /*SPLIT*/ ;<br>let buttonMessage = /*SPLIT*/ ;<br>let mainWindowTitle = " " + /*SPLIT*/ ;<br>let mainWindowTitleColor = /*SPLIT*/ ;<br>let mainColor = /*SPLIT*/ ;<br>let language = /*SPLIT*/ ;<br>let screenWindow;<br><br>function readFromUrl(u, finishdo) {<br>    var thread = new java.lang.Thread(new java.lang.Runnable({<br>        run: function() {<br>            try {<br>                let ans = [];<br>                var url = new java.net.URL(u);<br>                var urlConn = url.openConnection();<br>                var inputStream = url.openStream();<br>                let br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));<br>                let temp;<br>                while ((temp = br.readLine()) !== null) {<br>                    ans.push(temp);<br>                }<br>                finishdo(ans.join(""));<br>            } catch (e) {<br>                print(e);<br>            }<br>        }<br>    }));<br>    thread.start();<br>}<br><br>function showWindow() {<br>    ctx.runOnUiThread(new Runnable({<br>        run: function() {<br>            try {<br>                let outValue = new android.util.TypedValue();<br>                ctx.getTheme().resolveAttribute(android.R.attr.selectableItemBackground, outValue, true);<br>                let resourceId = outValue.resourceId;<br>                let divider = ctx.obtainStyledAttributes([android.R.attr.listDivider]).getDrawable(0);<br>                let verticalDivider = ctx.obtainStyledAttributes([android.R.attr.dividerVertical]).getDrawable(0);<br>                let scale = 1.5;<br>                let width = Width / 16;<br>                let height = Height / 16;<br>                let layout = new LinearLayout(ctx);<br>                let window = new PopupWindow(layout, width * 12, height * 12, true);<br>                layout.setOrientation(1);<br>                let titleLayout = new LinearLayout(ctx);<br>                titleLayout.setBackgroundColor(Color.parseColor(mainColor));<br>                let title = new TextView(ctx);<br>                title.setText(" " + mainWindowTitle);<br>                title.setTextColor(Color.parseColor(mainWindowTitleColor));<br>                title.setLayoutParams(new LayoutParams(width * 12 - height * 2, height * 2));<br>                let closeButton = new Button(ctx);<br>                closeButton.setText("X");<br>                closeButton.setTextColor(Color.parseColor(mainWindowTitleColor));<br>                closeButton.setLayoutParams(new LayoutParams(height * 2, height * 2));<br>                closeButton.setBackgroundResource(resourceId);<br>                closeButton.setOnClickListener(new OnClickListener({<br>                    onClick: function() {<br>                        try {<br>                            if (window !== undefined) {<br>                                window.dismiss();<br>                                window = undefined;<br>                            }<br>                        } catch (e) {<br>                            print("Error at " + e.lineNumber + " Reason: " + e);<br>                        }<br>                    }<br>                }));<br>                titleLayout.addView(title);<br>                titleLayout.addView(closeButton);<br>                layout.addView(titleLayout);<br>                let mainLayout = new LinearLayout(ctx);<br>                mainLayout.setOrientation(1);<br>                mainLayout.setShowDividers(LinearLayout.SHOW_DIVIDER_MIDDLE);<br>                mainLayout.setDividerDrawable(divider);<br><br>                let scriptCheckBoxes = null;<br>                let mapCheckBoxes = null;<br>                let apkCheckBoxes = null;<br>                let otherCheckBoxes = null;<br>                let listData = null;<br>                readFromUrl(listURL, function(data) {<br>                    ctx.runOnUiThread(new Runnable({<br>                        run: function() {<br>                            try {<br>                                listData = JSON.parse(data);<br>                                scriptCheckBoxes = [];<br>                                mapCheckBoxes = [];<br>                                apkCheckBoxes = [];<br>                                otherCheckBoxes = [];<br><br>                                let selectAllCheckBox = new CheckBox(ctx);<br>                                selectAllCheckBox.setLayoutParams(new LayoutParams(width * 12, height * 2));<br>                                selectAllCheckBox.setText("전체 선택");<br>                                selectAllCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener({<br>                                    onCheckedChanged: function(v, c){<br>                                        try{<br>                                            if (!v.isPressed()) return;<br>                                            for (let i of scriptCheckBoxes) i.setChecked(c);<br>                                            for (let i of mapCheckBoxes) i.setChecked(c);<br>                                            for (let i of apkCheckBoxes) i.setChecked(c);<br>                                            for (let i of otherCheckBoxes) i.setChecked(c);<br>                                        }catch(e){<br>                                            print("Error at " + e.lineNumber + " Reason: " + e);<br>                                        }<br>                                    }<br>                                }));<br>                                mainLayout.addView(selectAllCheckBox);<br><br>                                let updateListener = new OnCheckedChangeListener({<br>                                    onCheckedChanged: function(v, c){<br>                                        try{<br>                                            if (!v.isPressed()) return;<br>                                            for (let i of scriptCheckBoxes) if (!i.isChecked()){<br>                                                selectAllCheckBox.setChecked(false);<br>                                                return;<br>                                            }<br>                                            for (let i of mapCheckBoxes) if (!i.isChecked()){<br>                                                selectAllCheckBox.setChecked(false);<br>                                                return;<br>                                            }<br>                                            for (let i of apkCheckBoxes) if (!i.isChecked()){<br>                                                selectAllCheckBox.setChecked(false);<br>                                                return;<br>                                            }<br>                                            for (let i of otherCheckBoxes) if (!i.isChecked()){<br>                                                selectAllCheckBox.setChecked(false);<br>                                                return;<br>                                            }<br>                                            selectAllCheckBox.setChecked(true);<br>                                        }catch(e){<br>                                            print("Error at " + e.lineNumber + " Reason: " + e);<br>                                        }<br>                                    }<br>                                });<br><br>                                if (listData.script.length > 0) {<br>                                    let scriptText = new TextView(ctx);<br>                                    scriptText.setTextColor(Color.BLACK);<br>                                    if (language === "Korean") scriptText.setText("스크립트");<br>                                    else scriptText.setText("Scripts");<br>                                    mainLayout.addView(scriptText);<br>                                    for (let i in listData.script) {<br>                                        let scriptCheckLayout = new LinearLayout(ctx);<br>                                        scriptCheckBoxes[i] = new CheckBox(ctx);<br>                                        scriptCheckBoxes[i].setText("");<br>                                        scriptCheckBoxes[i].setLayoutParams(new LayoutParams(width * 1, height * 2));<br>                                        scriptCheckBoxes[i].setClickable(false);<br>                                        scriptCheckBoxes[i].setOnCheckedChangeListener(updateListener);<br>                                        scriptCheckLayout.addView(scriptCheckBoxes[i]);<br>                                        let scriptCheckTextLayout = new LinearLayout(ctx);<br>                                        scriptCheckTextLayout.setOrientation(1);<br>                                        let scriptCheckTitle = new TextView(ctx);<br>                                        scriptCheckTitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        scriptCheckTitle.setText(listData.script[i].Title);<br>                                        scriptCheckTitle.setTextColor(Color.BLACK);<br>                                        scriptCheckTitle.setClickable(false);<br>                                        scriptCheckTextLayout.addView(scriptCheckTitle);<br>                                        let scriptCheckSubtitle = new TextView(ctx);<br>                                        scriptCheckSubtitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        scriptCheckSubtitle.setText(listData.script[i].Subtitle);<br>                                        scriptCheckSubtitle.setClickable(false);<br>                                        scriptCheckTextLayout.addView(scriptCheckSubtitle);<br>                                        scriptCheckLayout.addView(scriptCheckTextLayout);<br>                                        scriptCheckLayout.setClickable(true);<br>                                        let index = i;<br>                                        scriptCheckLayout.setOnClickListener(new OnClickListener({<br>                                            onClick: function() {<br>                                                scriptCheckBoxes[index].setChecked(!scriptCheckBoxes[index].isChecked());<br>                                            }<br>                                        }));<br>                                        mainLayout.addView(scriptCheckLayout);<br>                                    }<br>                                }<br><br>                                if (listData.map.length > 0) {<br>                                    let mapText = new TextView(ctx);<br>                                    mapText.setTextColor(Color.BLACK);<br>                                    if (language === "Korean") mapText.setText("맵");<br>                                    else mapText.setText("Maps");<br>                                    mainLayout.addView(mapText);<br>                                    for (let i in listData.map) {<br>                                        let mapCheckLayout = new LinearLayout(ctx);<br>                                        mapCheckBoxes[i] = new CheckBox(ctx);<br>                                        mapCheckBoxes[i].setText("");<br>                                        mapCheckBoxes[i].setLayoutParams(new LayoutParams(width * 1, height * 2));<br>                                        mapCheckBoxes[i].setClickable(false);<br>                                        mapCheckBoxes[i].setOnCheckedChangeListener(updateListener);<br>                                        mapCheckLayout.addView(mapCheckBoxes[i]);<br>                                        let mapCheckTextLayout = new LinearLayout(ctx);<br>                                        mapCheckTextLayout.setOrientation(1);<br>                                        let mapCheckTitle = new TextView(ctx);<br>                                        mapCheckTitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        mapCheckTitle.setText(listData.map[i].Title);<br>                                        mapCheckTitle.setTextColor(Color.BLACK);<br>                                        mapCheckTitle.setClickable(false);<br>                                        mapCheckTextLayout.addView(mapCheckTitle);<br>                                        let mapCheckSubtitle = new TextView(ctx);<br>                                        mapCheckSubtitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        mapCheckSubtitle.setText(listData.map[i].Subtitle);<br>                                        mapCheckSubtitle.setClickable(false);<br>                                        mapCheckTextLayout.addView(mapCheckSubtitle);<br>                                        mapCheckLayout.addView(mapCheckTextLayout);<br>                                        mapCheckLayout.setClickable(true);<br>                                        let index = i;<br>                                        mapCheckLayout.setOnClickListener(new OnClickListener({<br>                                            onClick: function() {<br>                                                mapCheckBoxes[index].setChecked(!mapCheckBoxes[index].isChecked());<br>                                            }<br>                                        }));<br>                                        mainLayout.addView(mapCheckLayout);<br>                                    }<br>                                }<br><br>                                if (listData.apk.length > 0) {<br>                                    let apkText = new TextView(ctx);<br>                                    apkText.setTextColor(Color.BLACK);<br>                                    if (language === "Korean") apkText.setText("어플리케이션");<br>                                    else apkText.setText("Applications");<br>                                    mainLayout.addView(apkText);<br>                                    for (let i in listData.apk) {<br>                                        let apkCheckLayout = new LinearLayout(ctx);<br>                                        apkCheckBoxes[i] = new CheckBox(ctx);<br>                                        apkCheckBoxes[i].setText("");<br>                                        apkCheckBoxes[i].setLayoutParams(new LayoutParams(width * 1, height * 2));<br>                                        apkCheckBoxes[i].setClickable(false);<br>                                        apkCheckBoxes[i].setOnCheckedChangeListener(updateListener);<br>                                        apkCheckLayout.addView(apkCheckBoxes[i]);<br>                                        let apkCheckTextLayout = new LinearLayout(ctx);<br>                                        apkCheckTextLayout.setOrientation(1);<br>                                        let apkCheckTitle = new TextView(ctx);<br>                                        apkCheckTitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        apkCheckTitle.setText(listData.apk[i].Title);<br>                                        apkCheckTitle.setTextColor(Color.BLACK);<br>                                        apkCheckTitle.setClickable(false);<br>                                        apkCheckTextLayout.addView(apkCheckTitle);<br>                                        let apkCheckSubtitle = new TextView(ctx);<br>                                        apkCheckSubtitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        apkCheckSubtitle.setText(listData.apk[i].Subtitle);<br>                                        apkCheckSubtitle.setClickable(false);<br>                                        apkCheckTextLayout.addView(apkCheckSubtitle);<br>                                        apkCheckLayout.addView(apkCheckTextLayout);<br>                                        apkCheckLayout.setClickable(true);<br>                                        let index = i;<br>                                        apkCheckLayout.setOnClickListener(new OnClickListener({<br>                                            onClick: function() {<br>                                                apkCheckBoxes[index].setChecked(!apkCheckBoxes[index].isChecked());<br>                                            }<br>                                        }));<br>                                        mainLayout.addView(apkCheckLayout);<br>                                    }<br>                                }<br><br>                                if (listData.other.length > 0) {<br>                                    let otherText = new TextView(ctx);<br>                                    otherText.setTextColor(Color.BLACK);<br>                                    if (language === "Korean") otherText.setText("기타");<br>                                    else otherText.setText("Others");<br>                                    mainLayout.addView(otherText);<br>                                    for (let i in listData.other) {<br>                                        let otherCheckLayout = new LinearLayout(ctx);<br>                                        otherCheckBoxes[i] = new CheckBox(ctx);<br>                                        otherCheckBoxes[i].setText("");<br>                                        otherCheckBoxes[i].setLayoutParams(new LayoutParams(width * 1, height * 2));<br>                                        otherCheckBoxes[i].setClickable(false);<br>                                        otherCheckBoxes[i].setOnCheckedChangeListener(updateListener);<br>                                        otherCheckLayout.addView(otherCheckBoxes[i]);<br>                                        let otherCheckTextLayout = new LinearLayout(ctx);<br>                                        otherCheckTextLayout.setOrientation(1);<br>                                        let otherCheckTitle = new TextView(ctx);<br>                                        otherCheckTitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        otherCheckTitle.setText(listData.other[i].Title);<br>                                        otherCheckTitle.setTextColor(Color.BLACK);<br>                                        otherCheckTitle.setClickable(false);<br>                                        otherCheckTextLayout.addView(otherCheckTitle);<br>                                        let otherCheckSubtitle = new TextView(ctx);<br>                                        otherCheckSubtitle.setLayoutParams(new LayoutParams(width * 11, height * 1));<br>                                        otherCheckSubtitle.setText(listData.other[i].Subtitle);<br>                                        otherCheckSubtitle.setClickable(false);<br>                                        otherCheckTextLayout.addView(otherCheckSubtitle);<br>                                        otherCheckLayout.addView(otherCheckTextLayout);<br>                                        otherCheckLayout.setClickable(true);<br>                                        let index = i;<br>                                        otherCheckLayout.setOnClickListener(new OnClickListener({<br>                                            onClick: function() {<br>                                                otherCheckBoxes[index].setChecked(!otherCheckBoxes[index].isChecked());<br>                                            }<br>                                        }));<br>                                        mainLayout.addView(otherCheckLayout);<br>                                    }<br>                                }<br><br>                            } catch (e) {<br>                                print("Error at " + e.lineNumber + " Reason: " + e);<br>                            }<br>                        }<br>                    }));<br>                });<br><br>                let mainScroll = new ScrollView(ctx);<br>                mainScroll.setLayoutParams(new LayoutParams(width * 12, height * 8));<br>                mainScroll.addView(mainLayout);<br>                layout.addView(mainScroll);<br>                let controlLayout = new LinearLayout(ctx);<br>                let startButton = new Button(ctx);<br>                if (language === "Korean") startButton.setText("다운로드");<br>                else startButton.setText("Start");<br>                startButton.setLayoutParams(new LayoutParams(width * 2, height * 2));<br>                let waiting = [];<br>                let Downloadcount = 0;<br>                let updateRunnable = new Runnable({<br>                    run: function() {<br>                        try {<br>                            if (waiting.length <= Downloadcount) return;<br>                            if (waiting[Downloadcount].autoDownloader.getMax() === 0){<br>                                if (language === "Korean") nowProgressText.setText("준비 중");<br>                                else nowProgressText.setText("Readying");<br>                            }<br>                            nowProgressBar.setMax(waiting[Downloadcount].autoDownloader.getMax());<br>                            nowProgressBar.setProgress(waiting[Downloadcount].autoDownloader.getProgress());<br>                            nowProgressText.setText(Math.floor(waiting[Downloadcount].autoDownloader.getProgress() / 1024 * 10) / 10 + "/" + Math.floor(waiting[Downloadcount].autoDownloader.getMax() / 1024 * 10) / 10 + "(KB)");<br>                        } catch (e) {<br>                            print("Error at " + e.lineNumber + " Reason: " + e);<br>                        }<br>                    }<br>                });<br>                let updateThread = new Thread(new Runnable({<br>                    run: function() {<br>                        try {<br>                            while (!Thread.currentThread().isInterrupted()) {<br>                                Thread.sleep(50);<br>                                if (waiting.length <= Downloadcount) break;<br>                                ctx.runOnUiThread(updateRunnable);<br>                            }<br>                        } catch (e) {<br>                        }<br>                    }<br>                }));<br>                let continueFunction = function() {<br>                    waiting[Downloadcount].complete = true;<br>                    Downloadcount++;<br>                    if (waiting.length > Downloadcount) {<br>                        waiting[Downloadcount].autoDownloader.download(function(){<br>                            ctx.runOnUiThread(new Runnable(continueFunction));<br>                        });<br>                        entireProgressBar.setMax(waiting.length);<br>                        entireProgressBar.setProgress(Downloadcount);<br>                        entireProgressText.setText((Downloadcount) + "/" + waiting.length);<br>                    } else {<br>                        updateThread.interrupt();<br>                        ctx.runOnUiThread(new Runnable({<br>                            run: function() {<br>                                try {<br>                                    entireProgressBar.setProgress(0);<br>                                    nowProgressBar.setProgress(0);<br>                                    if (language === "Korean") {<br>                                        entireProgressText.setText("완료");<br>                                        nowProgressText.setText("0/0(KB)");<br>                                        print("다운로드 완료!");<br>                                    } else {<br>                                        entireProgressText.setText("Complete");<br>                                        nowProgressText.setText("0/0(KB)");<br>                                        print("Successfully Downloaded!");<br>                                    }<br>                                } catch (e) {<br>                                    print("Error at " + e.lineNumber + " Reason: " + e);<br>                                }<br>                            }<br>                        }));<br>                    }<br>                }<br>                startButton.setOnClickListener(new OnClickListener({<br>                    onClick: function() {<br>                        try {<br>                            if (listData === null) {<br>                                if (language === "Korean") print("목록 로딩 중... 잠시만 기다려 주세요!");<br>                                else print("Loading List... Please Wait!");<br>                                return;<br>                            }<br>                            for (let i in scriptCheckBoxes) {<br>                                if (scriptCheckBoxes[i].isChecked()) {<br>                                    waiting.push({<br>                                        autoDownloader: new AutoDownloader().setUrl(listData.script[i].URL).setPath(sdcard + "/" + listData.script[i].Path).setInstall(true).setForceInstall(true),<br>                                        complete: false<br>                                    });<br>                                }<br>                            }<br><br>                            for (let i in mapCheckBoxes) {<br>                                if (mapCheckBoxes[i].isChecked()) {<br>                                    waiting.push({<br>                                        autoDownloader: new AutoDownloader().setUrl(listData.map[i].URL).setPath(sdcard + "/" + listData.map[i].Path).setInstall(true).setForceInstall(true),<br>                                        complete: false<br>                                    });<br>                                }<br>                            }<br><br>                            for (let i in otherCheckBoxes) {<br>                                if (otherCheckBoxes[i].isChecked()) {<br>                                    waiting.push({<br>                                        autoDownloader: new AutoDownloader().setUrl(listData.other[i].URL).setPath(sdcard + "/" + listData.other[i].Path),<br>                                        complete: false<br>                                    });<br>                                }<br>                            }<br><br>                            for (let i in apkCheckBoxes) {<br>                                if (apkCheckBoxes[i].isChecked()) {<br>                                    waiting.push({<br>                                        autoDownloader: new AutoDownloader().setUrl(listData.apk[i].URL).setPath(sdcard + "/" + listData.apk[i].Path).setInstall(true).setForceInstall(true),<br>                                        complete: false<br>                                    });<br>                                }<br>                            }<br>                            if (waiting.length === 0){<br>                                if (language === "Korean") print("선택된 파일이 없습니다.");<br>                                else print("No Selected Files.");<br>                                return;<br>                            }<br>                            waiting[Downloadcount].autoDownloader.download(function(){<br>                                ctx.runOnUiThread(new Runnable(continueFunction));<br>                            });<br>                            updateThread.start();<br>                        } catch (e) {<br>                            print("Error at " + e.lineNumber + " Reason: " + e);<br>                        }<br>                    }<br>                }));<br>                controlLayout.addView(startButton);<br>                let progressLayout = new LinearLayout(ctx);<br>                progressLayout.setOrientation(1);<br>                let entireProgressLayout = new LinearLayout(ctx);<br>                let entireProgressTitle = new TextView(ctx);<br>                entireProgressTitle.setTextColor(Color.BLACK);<br>                if (language === "Korean") entireProgressTitle.setText("전체");<br>                else entireProgressTitle.setText("All");<br>                entireProgressTitle.setLayoutParams(new LayoutParams(width * 1, height * 1));<br>                entireProgressTitle.setGravity(Gravity.CENTER);<br>                entireProgressLayout.addView(entireProgressTitle);<br>                let entireProgressBar = new ProgressBar(ctx, null, android.R.attr.progressBarStyleHorizontal);<br>                entireProgressBar.setLayoutParams(new LayoutParams(width * 6, height * 1));<br>                entireProgressLayout.addView(entireProgressBar);<br>                let entireProgressText = new TextView(ctx);<br>                entireProgressText.setTextColor(Color.BLACK);<br>                entireProgressText.setText("0/0");<br>                entireProgressText.setLayoutParams(new LayoutParams(width * 3, height * 1));<br>                entireProgressText.setGravity(Gravity.CENTER);<br>                entireProgressLayout.addView(entireProgressText);<br>                progressLayout.addView(entireProgressLayout);<br><br>                let nowProgressLayout = new LinearLayout(ctx);<br>                let nowProgressTitle = new TextView(ctx);<br>                nowProgressTitle.setTextColor(Color.BLACK);<br>                if (language === "Korean") nowProgressTitle.setText("현재");<br>                else nowProgressTitle.setText("Now");<br>                nowProgressTitle.setLayoutParams(new LayoutParams(width * 1, height * 1));<br>                nowProgressTitle.setGravity(Gravity.CENTER);<br>                nowProgressLayout.addView(nowProgressTitle);<br>                let nowProgressBar = new ProgressBar(ctx, null, android.R.attr.progressBarStyleHorizontal);<br>                nowProgressBar.setLayoutParams(new LayoutParams(width * 6, height * 1));<br>                nowProgressLayout.addView(nowProgressBar);<br>                let nowProgressText = new TextView(ctx);<br>                nowProgressText.setTextColor(Color.BLACK);<br>                nowProgressText.setText("0/0(KB)");<br>                nowProgressText.setLayoutParams(new LayoutParams(width * 3, height * 1));<br>                nowProgressText.setGravity(Gravity.CENTER);<br>                nowProgressLayout.addView(nowProgressText);<br>                progressLayout.addView(nowProgressLayout);<br><br>                controlLayout.addView(progressLayout);<br><br>                layout.addView(controlLayout);<br><br>                window.setBackgroundDrawable(new ColorDrawable(Color.WHITE));<br>                window.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);<br>            } catch (e) {<br>                print("Error at " + e.lineNumber + " Reason: " + e);<br>            }<br>        }<br>    }));<br>}<br><br>function showButton() {<br>    if (screenWindow !== undefined) return;<br>    ctx.runOnUiThread(new Runnable({<br>        run: function() {<br>            try {<br>                if (screenWindow !== undefined) return;<br>                let button = new Button(ctx);<br>                button.setText(buttonMessage);<br>                button.setTextColor(Color.BLACK);<br>                button.setOnClickListener(new OnClickListener({<br>                    onClick: function(v) {<br>                        showWindow();<br>                    }<br>                }));<br>                button.setLayoutParams(new android.widget.RelativeLayout.LayoutParams(Height / 8, Height / 8));<br>                screenWindow = new PopupWindow(button, Height / 8, Height / 8, false);<br>                screenWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));<br>                screenWindow.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.RIGHT, 0, 0);<br>            } catch (e) {<br>                print("Error at " + e.lineNumber + ". Reason: " + e);<br>            }<br>        }<br>    }));<br>}<br><br>function removeButton() {<br>    ctx.runOnUiThread(new Runnable({<br>        run: function() {<br>            try {<br>                if (screenWindow === undefined) return;<br>                screenWindow.dismiss();<br>            } catch (e) {<br>                print("Error at " + e.lineNumber + ". Reason: " + e);<br>            }<br>        }<br>    }));<br>}<br><br>function newLevel() {<br>    removeButton();<br>}<br><br>function leaveGame() {<br>    showButton();<br>}<br>showButton();<br>'.replace(/<br>/g, "\r\n").split('/*SPLIT*/');
function create(){
	var e = document.getElementById("language");
	var selected = e.options[e.selectedIndex].text;
	document.getElementById('resultDiv').innerHTML = script[0] + '"' + document.getElementById('listURL').value + '"' + script[1] + '"' + document.getElementById('screenbuttontext').value + '"' + script[2] + '"' + document.getElementById('mainwindowtitle').value + '"' + script[3] + '"#' + document.getElementById('mainwindowtitlecolor').value + '"' + script[4] + '"#' + document.getElementById('maincolor').value + '"' + script[5] + '"' + selected + '"' + script[6];
}
